import discord
import random
from discord.ext import commands
from datetime import datetime
from db_manager import db_manager
from queueing import create_match
from config import MODES
import asyncio


class Tour:
    def __init__(self, bot, tournament_name, participants, slots, cog):
        self.bot = bot
        self.name = tournament_name
        self.participants = participants
        self.slots = slots
        self.current_round = 1
        self.matches = []
        self.winners = []
        self.is_finished = False
        self.cog = cog

    async def start_round(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥ —Ç—É—Ä–Ω–∏—Ä–∞"""
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —Ä–∞—É–Ω–¥, —É—á–∞—Å—Ç–Ω–∏–∫–∏ - –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
        if self.current_round > 1:
            self.participants = self.winners
            self.winners = []

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        unique_participants = []
        seen_ids = set()
        for p in self.participants:
            if p["id"] not in seen_ids:
                seen_ids.add(p["id"])
                unique_participants.append(p)
        self.participants = unique_participants

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞)
        if self.current_round == 1:
            while len(self.participants) < self.slots:
                self.participants.append(
                    {
                        "id": 0,
                        "name": f"emptyslot{len(self.participants)+1}",
                        "mention": "–ü—É—Å—Ç–æ–π —Å–ª–æ—Ç",
                    }
                )

        # –°–ª—É—á–∞–π–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ –ø–∞—Ä—ã, –∏—Å–∫–ª—é—á–∞—è –¥—É–±–ª–∏–∫–∞—Ç—ã
        random.shuffle(self.participants)
        pairs = []
        used_ids = set()

        for i in range(len(self.participants)):
            if self.participants[i]["id"] in used_ids:
                continue

            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            for j in range(i + 1, len(self.participants)):
                if (
                    self.participants[j]["id"] not in used_ids
                    and self.participants[j]["id"] != self.participants[i]["id"]
                ):

                    pairs.append((self.participants[i], self.participants[j]))
                    used_ids.add(self.participants[i]["id"])
                    used_ids.add(self.participants[j]["id"])
                    break

        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—á–∏
        self.matches = []
        for player1, player2 in pairs:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—ã —Å –¥–≤—É–º—è emptyslot
            if player1["id"] == 0 and player2["id"] == 0:
                continue

            match_id = await self.create_tournament_match(player1, player2)
            self.matches.append(
                {
                    "id": match_id,
                    "player1": player1,
                    "player2": player2,
                    "winner": None,
                    "is_finished": False,
                }
            )

        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –Ω–µ—á–µ—Ç–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–∞–ª—å—à–µ
        if len(used_ids) < len(self.participants):
            remaining = [p for p in self.participants if p["id"] not in used_ids]
            if remaining:
                lucky_player = remaining[0]
                self.winners.append(lucky_player)

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏
                if lucky_player["id"] != 0:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç
                    try:
                        user = await self.bot.fetch_user(lucky_player["id"])
                        await user.send(
                            f"üéâ –í —Ç—É—Ä–Ω–∏—Ä–µ {self.name} (—Ä–∞—É–Ω–¥ {self.current_round}) "
                            f"—É –≤–∞—Å –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –ø–æ—ç—Ç–æ–º—É –≤—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥!"
                        )
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∏–≥—Ä–æ–∫–∞: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–∞–Ω–∞–ª
        await self.send_round_info()

    async def create_tournament_match(self, player1, player2):
        """–°–æ–∑–¥–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –º–∞—Ç—á –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤"""
        # –î–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã
        p1_data = {
            "discord_id": player1["id"],
            "nickname": player1["name"],
            "rating": (
                db_manager.fetchone(
                    "players",
                    "SELECT currentelo FROM players WHERE discordid = ?",
                    (str(player1["id"]),),
                )[0]
                if player1["id"] != 0
                else 0
            ),
            "channel_id": None,
            "join_time": datetime.now(),
        }

        p2_data = {
            "discord_id": player2["id"],
            "nickname": player2["name"],
            "rating": (
                db_manager.fetchone(
                    "players",
                    "SELECT currentelo FROM players WHERE discordid = ?",
                    (str(player2["id"]),),
                )[0]
                if player2["id"] != 0
                else 0
            ),
            "channel_id": None,
            "join_time": datetime.now(),
        }

        # –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ - emptyslot, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—É–∂–¥–∞–µ–º –ø–æ–±–µ–¥—É
        if player1["id"] == 0 or player2["id"] == 0:
            winner = player2 if player1["id"] == 0 else player1
            match_id = await create_match(
                MODES["station5f"],
                p1_data,
                p2_data,
                matchtype=2,
                tournament_id=self.name,
            )

            # –ü–æ–º–µ—á–∞–µ–º –º–∞—Ç—á –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
            winner_score = 1 if winner["id"] == player1["id"] else 0
            loser_score = 1 - winner_score

            db_manager.execute(
                "matches",
                """
                UPDATE matches 
                SET player1score = ?, player2score = ?, isover = 1, isverified = 1
                WHERE matchid = ?
                """,
                (winner_score, loser_score, match_id),
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            self.winners.append(winner)
            return match_id

        # –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä–Ω—ã–π –º–∞—Ç—á
        cursor = db_manager.get_connection("matches").cursor()
        cursor.execute(
            """INSERT INTO matches 
            (mode, player1, player2, start_time, matchtype, tournament_id) 
            VALUES (?, ?, ?, ?, ?, ?)""",
            (
                MODES["station5f"],
                player1["name"],
                player2["name"],
                datetime.now(),
                2,
                self.name,
            ),
        )
        match_id = cursor.lastrowid
        db_manager.get_connection("matches").commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º
        if player1["id"] != 0:
            try:
                user = await self.bot.fetch_user(player1["id"])
                await self.send_match_notification(match_id, player1, player2, user)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player1['name']}: {e}")

        if player2["id"] != 0:
            try:
                user = await self.bot.fetch_user(player2["id"])
                await self.send_match_notification(match_id, player2, player1, user)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É {player2['name']}: {e}")

        return match_id

    async def send_round_info(self):
        channel = discord.utils.get(
            self.bot.get_all_channels(), name=f"{self.name}-matches"
        )
        if not channel:
            print(f"‚ö† –ö–∞–Ω–∞–ª {self.name}-matches –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞
        matches = db_manager.fetchall(
            "matches",
            """SELECT matchid, player1, player2, isover 
            FROM matches 
            WHERE tournament_id = ? 
            AND matchid IN ({})
            ORDER BY matchid""".format(
                ",".join("?" for _ in self.matches)
            ),
            (self.name, *(m["id"] for m in self.matches)),
        )

        embed = discord.Embed(
            title=f"üéÆ –¢—É—Ä–Ω–∏—Ä {self.name} - –†–∞—É–Ω–¥ {self.current_round}",
            description="–°–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞:",
            color=discord.Color.gold(),
        )

        for match in matches:
            match_id, player1, player2, isover = match
            status = "–ó–∞–≤–µ—Ä—à–µ–Ω" if isover else "–í –ø—Ä–æ—Ü–µ—Å—Å–µ"
            embed.add_field(
                name=f"–ú–∞—Ç—á #{match_id} ({status})",
                value=f"{player1} vs {player2}",
                inline=False,
            )

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—à–µ–¥—à–∏—Ö
        if len(self.winners) > len(self.matches):
            auto_qualified = [
                w
                for w in self.winners
                if w
                not in [m["player1"] for m in self.matches]
                + [m["player2"] for m in self.matches]
            ]
            if auto_qualified:
                names = ", ".join(p["name"] for p in auto_qualified)
                embed.add_field(
                    name="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç",
                    value=f"–°–ª–µ–¥—É—é—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ö–æ–¥: {names}",
                    inline=False,
                )

        embed.set_footer(text=f"–í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {len(matches)}")
        await channel.send(embed=embed)

    async def check_round_completion(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—Å–µ—Ö –º–∞—Ç—á–µ–π —Ä–∞—É–Ω–¥–∞"""
        # –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–∞—Ö
        for match in self.matches:
            if not match["is_finished"]:
                match_data = db_manager.fetchone(
                    "matches",
                    "SELECT isover, player1score, player2score FROM matches WHERE matchid = ?",
                    (match["id"],),
                )

                if match_data and match_data[0] == 1:  # –ï—Å–ª–∏ –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω
                    match["is_finished"] = True
                    isover, p1_score, p2_score = match_data

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
                    if p1_score > p2_score:
                        winner = match["player1"]
                    else:
                        winner = match["player2"]

                    match["winner"] = winner
                    self.winners.append(
                        winner
                    )  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥

        # –ï—Å–ª–∏ –≤—Å–µ –º–∞—Ç—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –∏–ª–∏ –∏—Ö –Ω–µ—Ç (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ—Ö–æ–¥)
        if all(m["is_finished"] for m in self.matches) or not self.matches:
            if len(self.winners) == 1:
                # –¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω
                await self.finish_tournament()
            else:
                # –ù–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥
                self.current_round += 1
                self.matches = []  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏
                await self.start_round()

    async def finish_tournament(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ç—É—Ä–Ω–∏—Ä –∏ –æ–±—ä—è–≤–ª—è–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è"""
        self.is_finished = True
        winner = self.winners[0]

        # –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        embed = discord.Embed(
            title=f"üèÜ –¢—É—Ä–Ω–∏—Ä {self.name} –∑–∞–≤–µ—Ä—à–µ–Ω!",
            description=f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è:\n**{winner['name']}**",
            color=discord.Color.gold(),
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_channel = discord.utils.get(
            self.bot.get_all_channels(), name=f"{self.name}-results"
        )

        if results_channel:
            await results_channel.send(embed=embed)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        if winner["id"] != 0:  # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç
            try:
                user = await self.bot.fetch_user(winner["id"])
                winner_embed = discord.Embed(
                    title=f"üèÜ –ü–æ–±–µ–¥–∞ –≤ —Ç—É—Ä–Ω–∏—Ä–µ {self.name}!",
                    description="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π!",
                    color=discord.Color.gold(),
                )
                await user.send(embed=winner_embed)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é: {e}")

        if self.cog and self.name in self.cog.active_tours:
            del self.cog.active_tours[self.name]

    async def set_winner(self, match_id, winner_name):
        """–í—Ä—É—á–Ω—É—é —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –º–∞—Ç—á–∞"""
        match = next((m for m in self.matches if m["id"] == match_id), None)
        if not match:
            return False

        winner = next(
            (
                p
                for p in [match["player1"], match["player2"]]
                if p["name"] == winner_name
            ),
            None,
        )

        if not winner:
            return False

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á –≤ –ë–î
        winner_score = 1 if winner["id"] == match["player1"]["id"] else 0
        loser_score = 1 - winner_score

        db_manager.execute(
            "matches",
            """
            UPDATE matches 
            SET player1score = ?, player2score = ?, isover = 1, isverified = 1
            WHERE matchid = ?
            """,
            (winner_score, loser_score, match_id),
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ
        match["winner"] = winner
        match["is_finished"] = True
        self.winners.append(winner)

        return True

    async def send_match_notification(self, match_id, player, opponent, user):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–≥—Ä–æ–∫—É"""
        embed = discord.Embed(
            title=f"üéÆ –¢—É—Ä–Ω–∏—Ä–Ω—ã–π –º–∞—Ç—á | –†–∞—É–Ω–¥ {self.current_round}",
            description=f"–¢—É—Ä–Ω–∏—Ä: **{self.name}**\nMatch ID: `{match_id}`",
            color=discord.Color.gold(),
        )

        embed.add_field(name="–í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫", value=opponent["name"], inline=False)
        embed.add_field(
            name="–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏",
            value="–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞ **–ø–æ–±–µ–¥–∏—Ç–µ–ª—å** –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π:\n"
            f"`.result {match_id} <—Å–≤–æ–π_—Å—á–µ—Ç>-<—Å—á–µ—Ç_—Å–æ–ø–µ—Ä–Ω–∏–∫–∞>`\n"
            "–ü—Ä–∏–º–µ—Ä: `.result {match_id} 5-3`",
            inline=False,
        )

        await user.send(embed=embed)
