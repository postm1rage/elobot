import discord
from discord.ui import View, Button, Select
from config import (
    MODES,
    MODE_NAMES,
    MAPS,
    MODERATOR_ID,
)
from db_manager import db_manager
import asyncio
import sqlite3
from datetime import datetime, timedelta

import random
import re

RESULT_REMINDER = (
    "‚ÑπÔ∏è –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞ **–ø–æ–±–µ–¥–∏—Ç–µ–ª—å** –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π `.result <ID_–º–∞—Ç—á–∞> <—Å–≤–æ–π_—Å—á–µ—Ç>-<—Å—á–µ—Ç_—Å–æ–ø–µ—Ä–Ω–∏–∫–∞>` "
    "–≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É, –ø—Ä–∏–ª–æ–∂–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç. –ü—Ä–∏–º–µ—Ä: `.result 123 5-3`\n"
    "‚ùó –£—á—Ç–∏—Ç–µ: –≤ —Å—á–µ—Ç–µ –ø–µ—Ä–≤—ã–º —á–∏—Å–ª–æ–º —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—á–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–±–æ–ª—å—à–µ–µ —á–∏—Å–ª–æ), –≤—Ç–æ—Ä—ã–º - –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ (–º–µ–Ω—å—à–µ–µ —á–∏—Å–ª–æ)."
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–ø–æ—Ä—Ç–æ–≤
pending_reports = {}
# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
pending_player_confirmations = {}  # {match_id: {data}}
player_confirmation_views = {}  # {message_id: view}


class ModeratorResolutionView(View):
    def __init__(self, match_id):
        super().__init__(timeout=None)
        self.match_id = match_id

    @discord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=discord.ButtonStyle.green)
    async def confirm(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ë–î
        match_data = db_manager.execute(
            "matches",
            "SELECT player1, player2, mode FROM matches WHERE matchid = ?",
            (self.match_id,),
        ).fetchone()

        if not match_data:
            await interaction.response.send_message("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
            return

        player1, player2, mode = match_data

        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ pending_player_confirmations
        result_data = pending_player_confirmations.get(self.match_id)
        if not result_data:
            await interaction.response.send_message(
                "‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", ephemeral=True
            )
            return

        scores = result_data["scores"]
        if not re.match(r"^\d+-\d+$", scores):
            await interaction.response.send_message(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞", ephemeral=True
            )
            return

        score1, score2 = map(int, scores.split("-"))

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await self.process_match_result(player1, player2, mode, score1, score2)

        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        if self.match_id in pending_player_confirmations:
            del pending_player_confirmations[self.match_id]

        await interaction.response.send_message(
            "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º!", ephemeral=True
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        await self.notify_players("–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
        await interaction.message.delete()

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red)
    async def reject(self, interaction: discord.Interaction, button: discord.ui.Button):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ç—á –≤ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_manager.execute(
            "matches",
            "UPDATE matches SET isover = 0 WHERE matchid = ?",
            (self.match_id,),
        )
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        if self.match_id in pending_player_confirmations:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            result_data = pending_player_confirmations[self.match_id]
            submitter_id = result_data["submitter_id"]
            del pending_player_confirmations[self.match_id]

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            try:
                submitter_user = await global_bot.fetch_user(submitter_id)
                await submitter_user.send(
                    f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ #{self.match_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
                )
            except:
                pass

        await interaction.response.send_message(
            "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω!", ephemeral=True
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        await self.notify_players("–æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
        await interaction.message.delete()

    @discord.ui.button(label="–¢–µ—Ö. –ø–æ—Ä–∞–∂–µ–Ω–∏–µ", style=discord.ButtonStyle.gray)
    async def tech_loss(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–µ
        match_data = db_manager.execute(
            "matches",
            "SELECT mode, player1, player2 FROM matches WHERE matchid = ?",
            (self.match_id,),
        ).fetchone()

        if not match_data:
            await interaction.response.send_message("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
            return

        mode, player1, player2 = match_data

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_data = pending_player_confirmations.get(self.match_id)
        if not result_data:
            await interaction.response.send_message(
                "‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", ephemeral=True
            )
            return

        winner = result_data["submitter_name"]
        loser = player2 if winner == player1 else player1

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
        await self.apply_tech_loss(mode, player1, player2, winner, loser)

        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        if self.match_id in pending_player_confirmations:
            del pending_player_confirmations[self.match_id]

        await interaction.response.send_message(
            "‚úÖ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ!", ephemeral=True
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        await self.notify_players(f"–∑–∞–≤–µ—Ä—à–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø–æ—Ä–∞–∂–µ–Ω–∏–µ–º –≤ –ø–æ–ª—å–∑—É {winner}")
        await interaction.message.delete()

    async def process_match_result(self, player1, player2, mode, score1, score2):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            if score1 > score2:
                winner = player1
                loser = player2
            else:
                winner = player2
                loser = player1

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
            rating_winner = get_player_rating(winner, mode)
            rating_loser = get_player_rating(loser, mode)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
            new_rating_winner, new_rating_loser = calculate_elo(
                rating_winner, rating_loser, 1
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            db_manager.execute(
                "players",
                "UPDATE players SET wins = wins + 1 WHERE playername = ?",
                (winner,),
            )
            db_manager.execute(
                "players",
                "UPDATE players SET losses = losses + 1 WHERE playername = ?",
                (loser,),
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º ELO
            update_player_rating(winner, new_rating_winner, mode)
            update_player_rating(loser, new_rating_loser, mode)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –º–∞—Ç—á–∞
            db_manager.execute(
                "matches",
                "UPDATE matches SET player1score = ?, player2score = ?, isover = 1, isverified = 1 WHERE matchid = ?",
                (score1, score2, self.match_id),
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–Ω–∞–ª
            mode_name = MODE_NAMES.get(mode, "Unknown")
            embed = discord.Embed(
                title=f"üèÅ –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω | ID: {self.match_id}",
                description=(
                    f"**–†–µ–∂–∏–º:** {mode_name}\n"
                    f"**–ò–≥—Ä–æ–∫–∏:** {player1} vs {player2}\n"
                    f"**–°—á–µ—Ç:** {score1} - {score2}\n"
                    f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner}\n\n"
                    f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è ELO:**\n"
                    f"{winner}: {rating_winner} ‚Üí **{new_rating_winner}** (+{new_rating_winner - rating_winner})\n"
                    f"{loser}: {rating_loser} ‚Üí **{new_rating_loser}** ({new_rating_loser - rating_loser})"
                ),
                color=discord.Color.green(),
            )

            # –ò—â–µ–º –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_channel = None
            for guild in global_bot.guilds:
                for channel in guild.text_channels:
                    if channel.name == "elobot-results":
                        results_channel = channel
                        break
                if results_channel:
                    break

            if results_channel:
                await results_channel.send(embed=embed)
            else:
                print("‚ö† –ö–∞–Ω–∞–ª elobot-results –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä–æ–∫–∞–º –≤ –õ–°
            try:
                # –ü–æ–ª—É—á–∞–µ–º discord_id –∏–≥—Ä–æ–∫–æ–≤
                player1_data = db_manager.execute(
                    "players",
                    "SELECT discordid FROM players WHERE playername = ?",
                    (player1,),
                ).fetchone()
                player2_data = db_manager.execute(
                    "players",
                    "SELECT discordid FROM players WHERE playername = ?",
                    (player2,),
                ).fetchone()
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞–º: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
            try:
                moderator = await global_bot.fetch_user(MODERATOR_ID)
                await moderator.send(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ #{self.match_id}: {str(e)}"
                )
            except:
                pass

    async def apply_tech_loss(self, mode, player1, player2, winner, loser):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
            rating_winner = get_player_rating(winner, mode)
            rating_loser = get_player_rating(loser, mode)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–±–µ–¥–∞)
            new_rating_winner, new_rating_loser = calculate_elo(
                rating_winner, rating_loser, 1
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            db_manager.execute(
                "players",
                "UPDATE players SET wins = wins + 1 WHERE playername = ?",
                (winner,),
            )
            db_manager.execute(
                "players",
                "UPDATE players SET losses = losses + 1 WHERE playername = ?",
                (loser,),
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º ELO
            update_player_rating(winner, new_rating_winner, mode)
            update_player_rating(loser, new_rating_loser, mode)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –º–∞—Ç—á–∞
            if winner == player1:
                db_manager.execute(
                    "matches",
                    "UPDATE matches SET player1score = 1, player2score = 0, isover = 1, isverified = 1 WHERE matchid = ?",
                    (self.match_id,),
                )
            else:
                db_manager.execute(
                    "matches",
                    "UPDATE matches SET player1score = 0, player2score = 1, isover = 1, isverified = 1 WHERE matchid = ?",
                    (self.match_id,),
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–Ω–∞–ª
            mode_name = MODE_NAMES.get(mode, "Unknown")
            embed = discord.Embed(
                title=f"‚ö†Ô∏è –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω (—Ç–µ—Ö. –ø–æ—Ä–∞–∂–µ–Ω–∏–µ) | ID: {self.match_id}",
                description=(
                    f"**–†–µ–∂–∏–º:** {mode_name}\n"
                    f"**–ò–≥—Ä–æ–∫–∏:** {player1} vs {player2}\n"
                    f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner} (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ)\n\n"
                    f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è ELO:**\n"
                    f"{winner}: {rating_winner} ‚Üí **{new_rating_winner}** (+{new_rating_winner - rating_winner})\n"
                    f"{loser}: {rating_loser} ‚Üí **{new_rating_loser}** ({new_rating_loser - rating_loser})"
                ),
                color=discord.Color.red(),
            )

            # –ò—â–µ–º –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_channel = None
            for guild in global_bot.guilds:
                for channel in guild.text_channels:
                    if channel.name == "elobot-results":
                        results_channel = channel
                        break
                if results_channel:
                    break

            if results_channel:
                await results_channel.send(embed=embed)
            else:
                print("‚ö† –ö–∞–Ω–∞–ª elobot-results –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä–æ–∫–∞–º –≤ –õ–°
            try:
                # –ü–æ–ª—É—á–∞–µ–º discord_id –∏–≥—Ä–æ–∫–æ–≤
                player1_data = db_manager.execute(
                    "players",
                    "SELECT discordid FROM players WHERE playername = ?",
                    (player1,),
                ).fetchone()
                player2_data = db_manager.execute(
                    "players",
                    "SELECT discordid FROM players WHERE playername = ?",
                    (player2,),
                ).fetchone()

                if player1_data:
                    user1 = await global_bot.fetch_user(int(player1_data[0]))
                    await user1.send(
                        f"‚ÑπÔ∏è –í–∞—à –º–∞—Ç—á #{self.match_id} –∑–∞–≤–µ—Ä—à–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø–æ—Ä–∞–∂–µ–Ω–∏–µ–º"
                    )
                    await user1.send(embed=embed)

                if player2_data:
                    user2 = await global_bot.fetch_user(int(player2_data[0]))
                    await user2.send(
                        f"‚ÑπÔ∏è –í–∞—à –º–∞—Ç—á #{self.match_id} –∑–∞–≤–µ—Ä—à–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø–æ—Ä–∞–∂–µ–Ω–∏–µ–º"
                    )
                    await user2.send(embed=embed)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞–º: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Ö. –ø–æ—Ä–∞–∂–µ–Ω–∏—è: {e}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
            try:
                moderator = await global_bot.fetch_user(MODERATOR_ID)
                await moderator.send(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç–µ—Ö. –ø–æ—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–∞—Ç—á–∞ #{self.match_id}: {str(e)}"
                )
            except:
                pass

    async def notify_players(self, action):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –æ –¥–µ–π—Å—Ç–≤–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–µ
        match_data = db_manager.execute(
            "matches",
            "SELECT player1, player2 FROM matches WHERE matchid = ?",
            (self.match_id,),
        ).fetchone()

        if not match_data:
            return

        player1, player2 = match_data

        # –ü–æ–ª—É—á–∞–µ–º discord_id –∏–≥—Ä–æ–∫–æ–≤
        player1_data = db_manager.execute(
            "players", "SELECT discordid FROM players WHERE playername = ?", (player1,)
        ).fetchone()
        player2_data = db_manager.execute(
            "players", "SELECT discordid FROM players WHERE playername = ?", (player2,)
        ).fetchone()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try:
            if player1_data:
                user1 = await global_bot.fetch_user(int(player1_data[0]))
                await user1.send(f"‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ #{self.match_id} {action}.")

            if player2_data:
                user2 = await global_bot.fetch_user(int(player2_data[0]))
                await user2.send(f"‚ÑπÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ #{self.match_id} {action}.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: {e}")


class PlayerConfirmationView(View):
    def __init__(self, match_id, submitter_id, opponent_id):
        super().__init__(timeout=3600)  # –¢–∞–π–º–∞—É—Ç 1 —á–∞—Å (3600 —Å–µ–∫—É–Ω–¥)
        self.match_id = match_id
        self.submitter_id = submitter_id
        self.opponent_id = opponent_id

    @discord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=discord.ButtonStyle.green)
    async def confirm(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        if interaction.user.id != self.opponent_id:
            await interaction.response.send_message(
                "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –º–∞—Ç—á!", ephemeral=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_data = pending_player_confirmations.get(self.match_id)
        if not result_data:
            await interaction.response.send_message(
                "‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É—Å—Ç–∞—Ä–µ–ª–∏", ephemeral=True
            )
            return

        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        if self.match_id in pending_player_confirmations:
            del pending_player_confirmations[self.match_id]

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await self.process_match_result(result_data)
        await interaction.response.send_message(
            "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", ephemeral=True
        )
        await interaction.message.delete()

    @discord.ui.button(label="–û—Å–ø–æ—Ä–∏—Ç—å", style=discord.ButtonStyle.red)
    async def dispute(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        if interaction.user.id != self.opponent_id:
            await interaction.response.send_message(
                "‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –º–∞—Ç—á!", ephemeral=True
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_data = pending_player_confirmations.get(self.match_id)
        if not result_data:
            await interaction.response.send_message(
                "‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É—Å—Ç–∞—Ä–µ–ª–∏", ephemeral=True
            )
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        await self.send_to_moderator(result_data)

        await interaction.response.send_message(
            "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å–ø–æ—Ä–µ–Ω! –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç —Å–ø–æ—Ä.", ephemeral=True
        )
        await interaction.message.delete()

    async def process_match_result(self, result_data):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        try:
            match_id = result_data["match_id"]
            scores = result_data["scores"]
            player1 = result_data["player1"]
            player2 = result_data["player2"]
            mode = result_data["mode"]

            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–∞—Ç—á–∞
            matchtype = db_manager.fetchone(
                "matches",
                "SELECT matchtype FROM matches WHERE matchid = ?",
                (match_id,),
            )[0]
            # –ü–∞—Ä—Å–∏–º —Å—á–µ—Ç
            score1, score2 = map(int, scores.split("-"))

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if score1 > score2:
                winner = player1
                loser = player2
            else:
                winner = player2
                loser = player1

            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
            rating_winner = get_player_rating(winner, mode)
            rating_loser = get_player_rating(loser, mode)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
            new_rating_winner, new_rating_loser = calculate_elo(
                rating_winner, rating_loser, 1
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            db_manager.execute(
                "players",
                "UPDATE players SET wins = wins + 1 WHERE playername = ?",
                (winner,),
            )
            db_manager.execute(
                "players",
                "UPDATE players SET losses = losses + 1 WHERE playername = ?",
                (loser,),
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º ELO —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–∞—Ç—á–µ–π
            if matchtype == 1:
                rating_winner = get_player_rating(winner, mode)
                rating_loser = get_player_rating(loser, mode)
                new_rating_winner, new_rating_loser = calculate_elo(rating_winner, rating_loser, 1)
                update_player_rating(winner, new_rating_winner, mode)
                update_player_rating(loser, new_rating_loser, mode)
                elo_change = f"\n\n**–ò–∑–º–µ–Ω–µ–Ω–∏—è ELO:**\n{winner}: {rating_winner} ‚Üí **{new_rating_winner}**\n{loser}: {rating_loser} ‚Üí **{new_rating_loser}**"
            else:
                elo_change = ""

            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –º–∞—Ç—á–∞
            db_manager.execute(
                "matches",
                "UPDATE matches SET player1score = ?, player2score = ?, isover = 1, isverified = 1 WHERE matchid = ?",
                (score1, score2, match_id),
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–Ω–∞–ª
            mode_name = MODE_NAMES.get(mode, "Unknown")
            embed = discord.Embed(
                title=f"üèÅ –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω | ID: {match_id}",
                description=(
                    f"**–†–µ–∂–∏–º:** {mode_name}\n"
                    f"**–ò–≥—Ä–æ–∫–∏:** {player1} vs {player2}\n"
                    f"**–°—á–µ—Ç:** {score1} - {score2}\n"
                    f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner}"
                    f"{elo_change}"
                ),
                color=discord.Color.green(),
            )

            # –ò—â–µ–º –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_channel = None
            for guild in global_bot.guilds:
                for channel in guild.text_channels:
                    if channel.name == "elobot-results":
                        results_channel = channel
                        break
                if results_channel:
                    break

            if results_channel:
                await results_channel.send(embed=embed)
            else:
                print("‚ö† –ö–∞–Ω–∞–ª elobot-results –Ω–µ –Ω–∞–π–¥–µ–Ω")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä–æ–∫–∞–º –≤ –õ–°
            try:
                submitter_user = await global_bot.fetch_user(
                    result_data["submitter_id"]
                )
                opponent_user = await global_bot.fetch_user(result_data["opponent_id"])

                # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                await submitter_user.send(
                    f"‚úÖ –í–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ #{match_id}"
                )
                await submitter_user.send(embed=embed)

                await opponent_user.send(
                    f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ #{match_id}"
                )
                await opponent_user.send(embed=embed)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–≥—Ä–æ–∫–∞–º: {e}")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
            try:
                moderator = await global_bot.fetch_user(MODERATOR_ID)
                await moderator.send(
                    f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ #{match_id}: {str(e)}"
                )
            except:
                pass

    async def send_to_moderator(self, result_data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–ø–æ—Ä–µ–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É"""
        try:
            moderator = await global_bot.fetch_user(MODERATOR_ID)

            embed = discord.Embed(
                title="‚ö†Ô∏è –û—Å–ø–æ—Ä–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞",
                description=(
                    f"**Match ID:** {result_data['match_id']}\n"
                    f"**–ò–≥—Ä–æ–∫–∏:** {result_data['player1']} vs {result_data['player2']}\n"
                    f"**–°—á–µ—Ç:** {result_data['scores']}\n"
                    f"**–û—Ç–ø—Ä–∞–≤–∏–ª:** <@{result_data['submitter_id']}>\n"
                    f"**–û—Å–ø–æ—Ä–∏–ª:** <@{result_data['opponent_id']}>"
                ),
                color=discord.Color.orange(),
            )

            if result_data["screenshot"]:
                embed.set_image(url=result_data["screenshot"])

            view = ModeratorResolutionView(result_data["match_id"])
            await moderator.send(embed=embed, view=view)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É: {e}")

    async def on_timeout(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ (1 —á–∞—Å)"""
        result_data = pending_player_confirmations.get(self.match_id)
        if result_data:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ —Ç–∞–π–º–∞—É—Ç–µ
            try:
                submitter_user = await global_bot.fetch_user(
                    result_data["submitter_id"]
                )
                opponent_user = await global_bot.fetch_user(result_data["opponent_id"])

                await submitter_user.send(
                    f"‚åõ –í–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ #{self.match_id} –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞. "
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É."
                )
                await opponent_user.send(
                    f"‚åõ –í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ #{self.match_id} –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞. "
                    f"–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É."
                )
            except:
                pass

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
            await self.send_to_moderator(result_data)

        try:
            await self.message.delete()
        except:
            pass


def save_queues_to_db():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π –≤ –ë–î"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏
        db_manager.execute("players", "UPDATE players SET in_queue = 0")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—è—Ö
        for mode, queue in queues.items():
            for player in queue:
                db_manager.execute(
                    "players",
                    "UPDATE players SET in_queue = 1 WHERE discordid = ?",
                    (str(player["discord_id"]),),
                )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–µ–π –≤ –ë–î: {e}")


class ReportView(View):
    def __init__(self, match_id, reporter_name, violator_name):
        super().__init__(timeout=None)
        self.match_id = match_id
        self.reporter_name = reporter_name
        self.violator_name = violator_name

    @discord.ui.button(label="–ü—Ä–∏–Ω—è—Ç—å", style=discord.ButtonStyle.danger)
    async def accept_report(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
        match_data = db_manager.execute(
            "matches",
            """
            SELECT mode, player1, player2, isverified, player1score, player2score 
            FROM matches 
            WHERE matchid = ?
            """,
            (self.match_id,),
        ).fetchone()

        if not match_data:
            await interaction.response.send_message("‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
            return

        mode, player1, player2, isverified, p1_score, p2_score = match_data

        # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É–∂–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω - –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
        if isverified == 1:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
            if p1_score > p2_score:
                winner_old = player1
                loser_old = player2
            else:
                winner_old = player2
                loser_old = player1

            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            db_manager.execute(
                "players",
                "UPDATE players SET wins = wins - 1 WHERE playername = ?",
                (winner_old,),
            )
            db_manager.execute(
                "players",
                "UPDATE players SET losses = losses - 1 WHERE playername = ?",
                (loser_old,),
            )

            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º ELO (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç—á–µ—Ç–∞)
            old_winner_rating = get_player_rating(winner_old, mode)
            old_loser_rating = get_player_rating(loser_old, mode)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ
        winner = self.reporter_name
        loser = self.violator_name

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—á–µ—Ç
        if player1 == winner:
            new_p1_score = 1
            new_p2_score = 0
        else:
            new_p1_score = 0
            new_p2_score = 1

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
        winner_rating = get_player_rating(winner, mode)
        loser_rating = get_player_rating(loser, mode)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
        new_winner_rating, new_loser_rating = calculate_elo(
            winner_rating, loser_rating, 1
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        db_manager.execute(
            "players",
            "UPDATE players SET wins = wins + 1 WHERE playername = ?",
            (winner,),
        )
        db_manager.execute(
            "players",
            "UPDATE players SET losses = losses + 1 WHERE playername = ?",
            (loser,),
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º ELO
        update_player_rating(winner, new_winner_rating, mode)
        update_player_rating(loser, new_loser_rating, mode)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á
        db_manager.execute(
            "matches",
            """
            UPDATE matches 
            SET player1score = ?, player2score = ?, isover = 1, isverified = 1 
            WHERE matchid = ?
            """,
            (new_p1_score, new_p2_score, self.match_id),
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫–∞–Ω–∞–ª
        moderator_name = f"{interaction.user.name}#{interaction.user.discriminator}"
        await self.send_report_result(
            mode,
            winner,
            loser,
            winner_rating,  # —Å—Ç–∞—Ä—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
            loser_rating,  # —Å—Ç–∞—Ä—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
            new_winner_rating,
            new_loser_rating,
            moderator_name,
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        try:
            # –ü–æ–ª—É—á–∞–µ–º discord_id –∏–≥—Ä–æ–∫–æ–≤
            winner_row = db_manager.execute(
                "players",
                "SELECT discordid FROM players WHERE playername = ?",
                (winner,),
            ).fetchone()
            if winner_row:
                winner_id = int(winner_row[0])
                winner_user = await global_bot.fetch_user(winner_id)
                await winner_user.send(
                    f"‚úÖ –í–∞—à —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –º–∞—Ç—á #{self.match_id} –ø—Ä–∏–Ω—è—Ç. "
                    f"–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ."
                )

            loser_row = db_manager.execute(
                "players",
                "SELECT discordid FROM players WHERE playername = ?",
                (loser,),
            ).fetchone()
            if loser_row:
                loser_id = int(loser_row[0])
                loser_user = await global_bot.fetch_user(loser_id)
                await loser_user.send(
                    f"‚ö†Ô∏è –í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –º–∞—Ç—á—É #{self.match_id} "
                    f"–∏–∑-–∑–∞ –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Ä–µ–ø–æ—Ä—Ç–∞."
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: {e}")

        # –£–¥–∞–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        if self.match_id in pending_reports:
            del pending_reports[self.match_id]

        await interaction.response.send_message(
            "‚úÖ –†–µ–ø–æ—Ä—Ç –ø—Ä–∏–Ω—è—Ç. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ.", ephemeral=True
        )
        await interaction.message.edit(view=None)

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.secondary)
    async def reject_report(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Ç—á –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        db_manager.execute(
            "matches",
            "UPDATE matches SET isover = 0 WHERE matchid = ?",
            (self.match_id,),
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞
        try:
            reporter_id = pending_reports[self.match_id]["reporter_id"]
            reporter_user = await global_bot.fetch_user(reporter_id)
            await reporter_user.send(
                f"‚ùå –í–∞—à —Ä–µ–ø–æ—Ä—Ç –Ω–∞ –º–∞—Ç—á #{self.match_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω."
            )
        except:
            pass

        # –£–¥–∞–ª—è–µ–º —Ä–µ–ø–æ—Ä—Ç –∏–∑ –æ–∂–∏–¥–∞–Ω–∏—è
        if self.match_id in pending_reports:
            del pending_reports[self.match_id]

        await interaction.response.send_message("‚ùå –†–µ–ø–æ—Ä—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω.", ephemeral=True)
        await interaction.message.edit(view=None)

    async def send_report_result(
        self,
        mode,
        winner,
        loser,
        old_winner_rating,
        old_loser_rating,
        new_winner_rating,
        new_loser_rating,
        moderator_name,
    ):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–ø–æ—Ä—Ç–∞ –≤ –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        try:
            mode_name = MODE_NAMES.get(mode, "Unknown")

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è ELO
            winner_change = new_winner_rating - old_winner_rating
            loser_change = new_loser_rating - old_loser_rating

            # –°–æ–∑–¥–∞–µ–º embed
            embed = discord.Embed(
                title="‚ö†Ô∏è –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ)",
                description=(
                    f"**Match ID:** {self.match_id}\n"
                    f"**–†–µ–∂–∏–º:** {mode_name}\n"
                    f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner}\n"
                    f"**–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π:** {loser}\n\n"
                    f"**–†–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è–ª:** {moderator_name}\n\n"
                    f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è ELO:**\n"
                    f"{winner}: {old_winner_rating} ‚Üí **{new_winner_rating}** ({winner_change:+})\n"
                    f"{loser}: {old_loser_rating} ‚Üí **{new_loser_rating}** ({loser_change:+})"
                ),
                color=discord.Color.red(),
            )
            embed.set_footer(text=f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ø–æ—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ä–µ–ø–æ—Ä—Ç—É")

            # –ò—â–µ–º –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results_channel = None
            for guild in global_bot.guilds:
                for channel in guild.text_channels:
                    if channel.name == "elobot-results":
                        results_channel = channel
                        break
                if results_channel:
                    break

            if results_channel:
                await results_channel.send(embed=embed)
            else:
                print("‚ö† –ö–∞–Ω–∞–ª elobot-results –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä–µ–ø–æ—Ä—Ç–∞: {e}")


global_bot = None
# –û—á–µ—Ä–µ–¥–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∂–∏–º–∞
queues = {mode: [] for mode in MODES.values()}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
map_voting = (
    {}
)  # {match_id: {"players": [p1, p2], "remaining_maps": [...], "current_player": discord_id}}

pending_results = (
    {}
)  # {message_id: {"match_id": int, "player1": str, "player2": str, "scores": str, "screenshot": str}}


def get_discord_id_by_nickname(nickname):
    result = db_manager.execute(
        "players",
        "SELECT discordid FROM players WHERE playername = ?",
        (nickname,),
    ).fetchone()
    return int(result[0]) if result else None


# –û–±—ä—è–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é send_map_selection –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
async def send_map_selection(match_id):
    global global_bot, map_voting
    if match_id not in map_voting:
        return

    voting = map_voting[match_id]
    current_player = voting["current_player"]
    remaining_maps = voting["remaining_maps"]

    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if current_player in voting.get("messages", {}):
        try:
            await voting["messages"][current_player].delete()
        except:
            pass

    try:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ View
        view = MapSelectionView(match_id, remaining_maps, current_player)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = await global_bot.get_user(current_player).send(
            f"**–í–∞—à —Ö–æ–¥!** –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç—É –¥–ª—è –≤—ã—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è:", view=view
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voting.setdefault("messages", {})[current_player] = msg
        view.message = msg  # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ on_timeout

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        other_player = next(pid for pid in voting["players"] if pid != current_player)
        try:
            await global_bot.get_user(other_player).send(
                f"–û–∂–∏–¥–∞–π—Ç–µ —Å–≤–æ–µ–≥–æ —Ö–æ–¥–∞. –°–µ–π—á–∞—Å –≤—ã–±–∏—Ä–∞–µ—Ç <@{current_player}>."
            )
        except:
            pass

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ö–æ–¥
        voting["current_player"] = other_player
        await asyncio.sleep(1)
        await send_map_selection(match_id)


class MapSelectionView(View):
    def __init__(self, match_id, maps, player_id):
        super().__init__(timeout=120)
        self.match_id = match_id
        self.player_id = player_id
        self.maps = maps
        self.has_responded = False  # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞

        for map_name in maps:
            button = Button(
                label=map_name,
                style=discord.ButtonStyle.secondary,
                custom_id=f"map_{map_name}",
            )
            button.callback = lambda i, m=map_name: self.button_callback(i, m)
            self.add_item(button)

    async def on_timeout(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –ø—Ä–∏ —Ç–∞–π–º–∞—É—Ç–µ"""
        if self.has_responded:
            return

        self.has_responded = True
        global map_voting

        if self.match_id not in map_voting:
            return

        voting = map_voting[self.match_id]

        # –ï—Å–ª–∏ –∫–∞—Ä—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å - –∑–∞–≤–µ—Ä—à–∞–µ–º
        if not voting["remaining_maps"]:
            await self.finish_map_selection()
            return

        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É
        selected_map = random.choice(voting["remaining_maps"])

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.message.edit(
                content=f"‚è± –í—Ä–µ–º—è –≤—ã—à–ª–æ! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã—á–µ—Ä–∫–Ω—É—Ç–∞ –∫–∞—Ä—Ç–∞ **{selected_map}**",
                view=None,
            )
        except discord.NotFound:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç
        if selected_map in voting["remaining_maps"]:
            voting["remaining_maps"].remove(selected_map)
        voting["last_selected"] = selected_map

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        if len(voting["remaining_maps"]) <= 1:
            await self.finish_map_selection()
            return

        # –ü–µ—Ä–µ–¥–∞–µ–º —Ö–æ–¥ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
        voting["current_player"] = (
            voting["players"][1]
            if voting["current_player"] == voting["players"][0]
            else voting["players"][0]
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–±–æ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
        await send_map_selection(self.match_id)

    async def button_callback(self, interaction: discord.Interaction, map_name: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã"""
        if self.has_responded:
            await interaction.response.send_message(
                "‚åõ –≠—Ç–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ", ephemeral=True
            )
            return

        self.has_responded = True
        global map_voting

        if self.match_id not in map_voting:
            await interaction.response.send_message(
                "–ü—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω", ephemeral=True
            )
            return

        voting = map_voting[self.match_id]
        selected_map = map_name

        # –£–¥–∞–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É
        if selected_map in voting["remaining_maps"]:
            voting["remaining_maps"].remove(selected_map)
        voting["last_selected"] = selected_map

        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∞—Å—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–∞—Ä—Ç–∞ - –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        if len(voting["remaining_maps"]) <= 1:
            await interaction.response.edit_message(
                content=f"–í—ã –≤—ã—á–µ—Ä–∫–Ω—É–ª–∏ –∫–∞—Ä—Ç—É **{selected_map}**", view=None
            )
            await self.finish_map_selection()
            return

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ö–æ–¥
        voting["current_player"] = (
            voting["players"][1]
            if voting["current_player"] == voting["players"][0]
            else voting["players"][0]
        )

        await interaction.response.edit_message(
            content=f"–í—ã –≤—ã—á–µ—Ä–∫–Ω—É–ª–∏ –∫–∞—Ä—Ç—É **{selected_map}**", view=None
        )
        await send_map_selection(self.match_id)

    async def finish_map_selection(self):
        global map_voting
        if self.match_id not in map_voting:
            print(f"–û–®–ò–ë–ö–ê: –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ {self.match_id} –ø–æ—Ç–µ—Ä—è–Ω—ã!")
            return

        voting = map_voting.get(self.match_id)
        if not voting or not voting.get("remaining_maps"):
            print(f"–û–®–ò–ë–ö–ê: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—Ä—Ç–∞—Ö –¥–ª—è –º–∞—Ç—á–∞ {self.match_id}")
            return
        selected_map = (
            voting["remaining_maps"][0] if voting["remaining_maps"] else "–°—Ç–∞–Ω—Ü–∏—è"
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db_manager.execute(
            "matches",
            "UPDATE matches SET map = ? WHERE matchid = ?",
            (selected_map, self.match_id),
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        for player_id in voting["players"]:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
            opponent_id = next(pid for pid in voting["players"] if pid != player_id)

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞
            if (
                "player_nicknames" in voting
                and opponent_id in voting["player_nicknames"]
            ):
                opponent_nickname = voting["player_nicknames"][opponent_id]
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ë–î
                try:
                    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    player_data = db_manager.execute(
                        "players",
                        "SELECT playername FROM players WHERE discordid = ?",
                        (str(opponent_id),),  # <-- –ó–∞–ø—è—Ç–∞—è –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä—Ç–µ–∂–∞
                    ).fetchone()
                    opponent_nickname = (
                        player_data[0] if player_data else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫"
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –∏–∑ –ë–î: {e}")
                    opponent_nickname = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫"

            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–ø–µ—Ä–Ω–∏–∫–µ
                opponent_user = await global_bot.fetch_user(opponent_id)
                discord_tag = f"{opponent_user.name}#{opponent_user.discriminator}"
            except:
                discord_tag = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

            # –°–æ–∑–¥–∞–µ–º embed
            embed = discord.Embed(
                title="–ß–µ—Ä–∫–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", color=discord.Color.green()
            )
            embed.add_field(name="–ö–∞—Ä—Ç–∞", value=f"**{selected_map}**", inline=False)
            embed.add_field(
                name="–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫", value=f"**{opponent_nickname}**", inline=False
            )
            embed.add_field(name="Discord –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", value=discord_tag, inline=False)
            embed.set_footer(text=f"Match ID: {self.match_id}")

            try:
                await global_bot.get_user(player_id).send(embed=embed)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
        try:
            player1 = await global_bot.fetch_user(voting["players"][0])
            player2 = await global_bot.fetch_user(voting["players"][1])

            instruction = (
                "üîç –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ Discord –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã.\n"
                "‚ÑπÔ∏è –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞ **–ø–æ–±–µ–¥–∏—Ç–µ–ª—å** –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π "
                "`.result <ID_–º–∞—Ç—á–∞> <—Å–≤–æ–π_—Å—á–µ—Ç>-<—Å—á–µ—Ç_—Å–æ–ø–µ—Ä–Ω–∏–∫–∞>` –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É, "
                "–ø—Ä–∏–ª–æ–∂–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç.\n"
                "–ü—Ä–∏–º–µ—Ä: `.result 123 5-3`"
            )

            await player1.send(instruction)
            await player2.send(instruction)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")

        # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏
        if self.match_id in map_voting:
            del map_voting[self.match_id]


class ModeSelectView(View):
    def __init__(self, player_id):
        super().__init__(timeout=30)
        self.player_id = player_id
        self.selected_mode = None

        options = [
            discord.SelectOption(label="Any", value="0"),
            discord.SelectOption(label="Station 5 flags", value="1"),
            discord.SelectOption(label="MotS Solo", value="2"),
            discord.SelectOption(label="12min", value="3"),
        ]

        self.select = Select(placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã", options=options)
        self.select.callback = self.select_callback
        self.add_item(self.select)

    async def select_callback(self, interaction: discord.Interaction):
        if interaction.user.id != self.player_id:
            await interaction.response.send_message(
                "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –æ—á–µ—Ä–µ–¥—å!", ephemeral=True
            )
            return

        self.selected_mode = int(self.select.values[0])
        await interaction.response.defer()
        self.stop()


def calculate_elo(player1_rating, player2_rating, result, K=40, C=400, max_rating=4000):
    expected_1 = 1 / (1 + 10 ** ((player2_rating - player1_rating) / C))
    expected_2 = 1 - expected_1

    weight_1 = max_rating / (max_rating + player1_rating)
    weight_2 = max_rating / (max_rating + player2_rating)

    new_rating_1 = player1_rating + K * (result - expected_1) * weight_1
    new_rating_2 = player2_rating + K * ((1 - result) - expected_2) * weight_2

    return round(new_rating_1), round(new_rating_2)


def get_player_rating(nickname, mode):
    if mode == MODES["station5f"]:
        rating = db_manager.execute(
            "players",
            "SELECT elo_station5f FROM players WHERE playername = ?",
            (nickname,),
        ).fetchone()
    elif mode == MODES["mots"]:
        rating = db_manager.execute(
            "players", "SELECT elo_mots FROM players WHERE playername = ?", (nickname,)
        ).fetchone()
    elif mode == MODES["12min"]:
        rating = db_manager.execute(
            "players", "SELECT elo_12min FROM players WHERE playername = ?", (nickname,)
        ).fetchone()
    else:
        rating = db_manager.execute(
            "players",
            "SELECT currentelo FROM players WHERE playername = ?",
            (nickname,),
        ).fetchone()

    return rating[0] if rating else 1000


def update_player_rating(nickname, new_rating, mode):
    # –û–±–Ω–æ–≤–ª—è–µ–º ELO –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if mode == MODES["station5f"]:
        db_manager.execute(
            "players",
            "UPDATE players SET elo_station5f = ? WHERE playername = ?",
            (new_rating, nickname),
        )
    elif mode == MODES["mots"]:
        db_manager.execute(
            "players",
            "UPDATE players SET elo_mots = ? WHERE playername = ?",
            (new_rating, nickname),
        )
    elif mode == MODES["12min"]:
        db_manager.execute(
            "players",
            "UPDATE players SET elo_12min = ? WHERE playername = ?",
            (new_rating, nickname),
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—ã–π ELO
    db_manager.execute(
        "players",
        """
        UPDATE players 
        SET currentelo = elo_station5f + elo_mots + elo_12min 
        WHERE playername = ?
        """,
        (nickname,),
    )


async def find_match():
    """–ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π –≤ –æ—á–µ—Ä–µ–¥—è—Ö —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –º–∞—Ç—á–∞"""
    while True:
        await asyncio.sleep(15)
        print(
            f"[{datetime.now().strftime('%H:%M:%S')}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π: {[len(q) for q in queues.values()]}"
        )

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–∞—Ö –ø–æ —Ç–∏–ø–∞–º
            active_players = {1: set(), 2: set()}  # –û–±—ã—á–Ω—ã–µ –º–∞—Ç—á–∏  # –¢—É—Ä–Ω–∏—Ä–Ω—ã–µ –º–∞—Ç—á–∏

            # –ó–∞–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–∞—Ç—á–∞
            for match_type in [1, 2]:
                matches = db_manager.fetchall(
                    "matches",
                    "SELECT player1, player2 FROM matches WHERE isover = 0 AND matchtype = ?",
                    (match_type,),
                )
                for player1, player2 in matches:
                    active_players[match_type].add(player1)
                    active_players[match_type].add(player2)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ (1, 2, 3) - —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –º–∞—Ç—á–∏ (matchtype=1)
            for mode in [MODES["station5f"], MODES["mots"], MODES["12min"]]:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤, –∏—Å–∫–ª—é—á–∞—è —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –≤ –æ–±—ã—á–Ω–æ–º –º–∞—Ç—á–µ
                queue = [
                    p for p in queues[mode] if p["nickname"] not in active_players[1]
                ]

                if len(queue) >= 2:
                    try:
                        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ—á–µ—Ä–µ–¥–∏
                        queue.sort(key=lambda x: x["join_time"])

                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
                        player1 = queue.pop(0)

                        # –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
                        min_diff = float("inf")
                        candidate = None
                        candidate_idx = None

                        for idx, p in enumerate(queue):
                            diff = abs(player1["rating"] - p["rating"])
                            if diff < min_diff:
                                min_diff = diff
                                candidate = p
                                candidate_idx = idx

                        if candidate_idx is not None:
                            player2 = queue.pop(candidate_idx)
                            await create_match(mode, player1, player2)
                            save_queues_to_db()
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ {MODE_NAMES[mode]}: {e}")
                        continue

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∂–∏–º–∞ "Any" (0)
            queue_any = [
                p
                for p in queues[MODES["any"]]
                if p["nickname"] not in active_players[1]
            ]

            if queue_any:
                try:
                    # –ü–æ–∏—Å–∫ –≤ –¥—Ä—É–≥–∏—Ö —Ä–µ–∂–∏–º–∞—Ö (1, 2, 3)
                    min_diff = float("inf")
                    candidate = None
                    candidate_mode = None
                    candidate_idx = None

                    for mode in [MODES["station5f"], MODES["mots"], MODES["12min"]]:
                        queue = [
                            p
                            for p in queues[mode]
                            if p["nickname"] not in active_players[1]
                        ]

                        for idx, p in enumerate(queue):
                            diff = abs(queue_any[0]["rating"] - p["rating"])
                            if diff < min_diff:
                                min_diff = diff
                                candidate = p
                                candidate_mode = mode
                                candidate_idx = idx

                    if candidate:
                        player_any = queue_any.pop(0)
                        queues[candidate_mode].pop(candidate_idx)
                        await create_match(candidate_mode, player_any, candidate)
                        save_queues_to_db()
                    else:
                        # –ü–æ–∏—Å–∫ –≤–Ω—É—Ç—Ä–∏ –æ—á–µ—Ä–µ–¥–∏ "Any"
                        if len(queue_any) >= 2:
                            player1 = queue_any.pop(0)
                            min_diff = float("inf")
                            candidate = None
                            candidate_idx = None

                            for idx, p in enumerate(queue_any):
                                diff = abs(player1["rating"] - p["rating"])
                                if diff < min_diff:
                                    min_diff = diff
                                    candidate = p
                                    candidate_idx = idx

                            if candidate_idx is not None:
                                player2 = queue_any.pop(candidate_idx)
                                random_mode = random.choice(
                                    [MODES["station5f"], MODES["mots"], MODES["12min"]]
                                )
                                await create_match(random_mode, player1, player2)
                                save_queues_to_db()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ Any: {e}")
                    continue

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ find_match: {e}")
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            save_queues_to_db()


async def create_match(mode, player1, player2, matchtype=1, tournament_id=None):
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç—á –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∏–≥—Ä–æ–∫–æ–≤"""
    try:
        print(
            f"[MATCH] –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—á–∞: {player1['nickname']} vs {player2['nickname']} ({MODE_NAMES[mode]})"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ "emptyslot"
        is_player1_empty = player1["nickname"].startswith("emptyslot")
        is_player2_empty = player2["nickname"].startswith("emptyslot")

        # –ï—Å–ª–∏ –æ–±–∞ "emptyslot", –º–∞—Ç—á –Ω–µ —Å–æ–∑–¥–∞–µ–º (—Ç—É—Ä–Ω–∏—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —ç—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ)
        if is_player1_empty and is_player2_empty:
            print(f"[MATCH] –û–±–∞ –∏–≥—Ä–æ–∫–∞ ‚Äî emptyslot, –º–∞—Ç—á –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è")
            return None

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        if not is_player1_empty and not is_player2_empty:
            db_manager.execute(
                "players",
                "UPDATE players SET in_queue = 0 WHERE playername IN (?, ?)",
                (player1["nickname"], player2["nickname"]),
            )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –º–∞—Ç—á–µ –∏ –ø–æ–ª—É—á–∞–µ–º ID
        cursor = db_manager.execute(
            "matches",
            """
            INSERT INTO matches (mode, player1, player2, start_time, matchtype, tournament_id)
            VALUES (?, ?, ?, ?, ?, ?)
            """,
            (
                mode,
                player1["nickname"],
                player2["nickname"],
                datetime.now(),
                matchtype,
                tournament_id,
            ),
        )
        match_id = cursor.lastrowid

        # –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ ‚Äî "emptyslot", –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –º–∞—Ç—á
        if matchtype == 2 and (is_player1_empty or is_player2_empty):
            winner = player2["nickname"] if is_player1_empty else player1["nickname"]
            db_manager.execute(
                "matches",
                """
                UPDATE matches 
                SET player1score = ?, player2score = ?, isover = 1, isverified = 1
                WHERE matchid = ?
                """,
                (0 if is_player1_empty else 1, 1 if is_player1_empty else 0, match_id),
            )
            print(f"[MATCH] –ú–∞—Ç—á —Å emptyslot –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –ø–æ–ª—å–∑—É {winner}")
            return match_id

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
        db_manager.execute(
            "players",
            "UPDATE players SET in_queue = 0 WHERE playername IN (?, ?)",
            (player1["nickname"], player2["nickname"]),
        )

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –º–∞—Ç—á–µ –∏ –ø–æ–ª—É—á–∞–µ–º ID
        cursor = db_manager.execute(
            "matches",
            """
            INSERT INTO matches (mode, player1, player2, start_time, matchtype, tournament_id)
            VALUES (?, ?, ?, ?, ?, ?)
            """,
            (
                mode,
                player1["nickname"],
                player2["nickname"],
                datetime.now(),
                matchtype,
                tournament_id,
            ),
        )
        match_id = cursor.lastrowid

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤ –∫–∞–Ω–∞–ª–µ –æ—á–µ—Ä–µ–¥–∏
        try:
            channel = global_bot.get_channel(player1["channel_id"])
            mode_name = MODE_NAMES.get(mode, "Unknown")

            embed = discord.Embed(
                title="üéÆ –ú–∞—Ç—á –Ω–∞–π–¥–µ–Ω!",
                description=(
                    f"**–†–µ–∂–∏–º:** {mode_name}\n"
                    f"**Match ID:** {match_id}\n"
                    f"**–¢–∏–ø:** {'–¢—É—Ä–Ω–∏—Ä–Ω—ã–π' if matchtype == 2 else '–û–±—ã—á–Ω—ã–π'}\n"
                    f"**–ò–≥—Ä–æ–∫ 1:** {player1['nickname']}\n"
                    f"**–ò–≥—Ä–æ–∫ 2:** {player2['nickname']}"
                ),
                color=discord.Color.green(),
            )
            await channel.send(embed=embed)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ: {e}")

        # –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º
        for player_data, opponent_data in [(player1, player2), (player2, player1)]:
            try:
                user = await global_bot.fetch_user(player_data["discord_id"])
                opponent_user = await global_bot.fetch_user(opponent_data["discord_id"])

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç—ç–≥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
                discord_tag = f"{opponent_user.name}#{opponent_user.discriminator}"

                embed = discord.Embed(
                    title="üéÆ –ú–∞—Ç—á –Ω–∞–π–¥–µ–Ω!", color=discord.Color.green()
                )
                embed.add_field(name="–†–µ–∂–∏–º", value=f"**{mode_name}**", inline=False)
                embed.add_field(
                    name="–¢–∏–ø –º–∞—Ç—á–∞",
                    value="–¢—É—Ä–Ω–∏—Ä–Ω—ã–π" if matchtype == 2 else "–û–±—ã—á–Ω—ã–π",
                    inline=False,
                )
                embed.add_field(
                    name="–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫",
                    value=f"**{opponent_data['nickname']}**",
                    inline=False,
                )
                embed.add_field(
                    name="Discord –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞", value=discord_tag, inline=False
                )
                embed.set_footer(text=f"Match ID: {match_id}")

                instruction = (
                    "üîç –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –≤ Discord –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–≥—Ä—ã.\n"
                    f"**Discord –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:** {discord_tag}\n\n"
                    "‚ÑπÔ∏è –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∞ **–ø–æ–±–µ–¥–∏—Ç–µ–ª—å** –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π "
                    "`.result <ID_–º–∞—Ç—á–∞> <—Å–≤–æ–π_—Å—á–µ—Ç>-<—Å—á–µ—Ç_—Å–æ–ø–µ—Ä–Ω–∏–∫–∞>` –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É, "
                    "–ø—Ä–∏–ª–æ–∂–∏–≤ —Å–∫—Ä–∏–Ω—à–æ—Ç.\n"
                    "–ü—Ä–∏–º–µ—Ä: `.result {match_id} 5-3`"
                )

                await user.send(embed=embed)
                await user.send(instruction)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –õ–° –∏–≥—Ä–æ–∫—É: {e}")

        # –î–ª—è MotS –∏ 12min –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º —á–µ—Ä–∫–∞–Ω–∏–µ –∫–∞—Ä—Ç
        if mode in [MODES["mots"], MODES["12min"]]:
            map_voting[match_id] = {
                "players": [player1["discord_id"], player2["discord_id"]],
                "player_nicknames": {
                    player1["discord_id"]: player1["nickname"],
                    player2["discord_id"]: player2["nickname"],
                },
                "remaining_maps": MAPS.copy(),
                "current_player": player1["discord_id"],
                "messages": {},
                "mode": mode,
            }
            await send_map_selection(match_id)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        queues[mode].append(player1)
        queues[mode].append(player2)
        save_queues_to_db()
    finally:
        # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ø—ã—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞
        save_queues_to_db()


# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
async def periodic_queue_saver():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π"""
    while True:
        await asyncio.sleep(600)  # –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        try:
            save_queues_to_db()
            print(f"[{datetime.now().strftime('%H:%M:%S')}] –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–µ–π")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")


async def check_expired_matches(bot):
    await bot.wait_until_ready()
    print(
        f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] –ó–∞–ø—É—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π"
    )

    while not bot.is_closed():
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await asyncio.sleep(300)

            now = datetime.now()
            one_hour_ago = now - timedelta(hours=1)
            
            print(
                f"[{now.strftime('%H:%M:%S')}] –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ç—á–µ–π —Å—Ç–∞—Ä—à–µ {one_hour_ago.strftime('%H:%M:%S')}"
            )

            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç—É—Ä–Ω–∏—Ä–Ω—ã–µ –º–∞—Ç—á–∏ (matchtype=2)
            expired_matches = db_manager.execute(
                "matches",
                """
                SELECT matchid, mode, player1, player2, start_time 
                FROM matches 
                WHERE isover = 0 AND start_time < ? AND matchtype = 1
                """,
                (one_hour_ago,),
            ).fetchall()

            print(f"–ù–∞–π–¥–µ–Ω–æ {len(expired_matches)} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π")

            for match in expired_matches:
                match_id, mode, player1_name, player2_name, start_time = match
                print(
                    f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–∞ {match_id}: {player1_name} vs {player2_name} (–Ω–∞—á–∞—Ç –≤ {start_time})"
                )

                # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞
                match_status = db_manager.execute(
                    "matches",
                    "SELECT isover FROM matches WHERE matchid = ?",
                    (match_id,),
                ).fetchone()

                if match_status and match_status[0] == 1:
                    print(f"–ú–∞—Ç—á {match_id} —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue

                print(f"–ú–∞—Ç—á {match_id} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

                # –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ç—á –∫–∞–∫ –Ω–∏—á—å—é
                db_manager.execute(
                    "matches",
                    "UPDATE matches SET player1score = 0, player2score = 0, isover = 1, isverified = 1 WHERE matchid = ?",
                    (match_id,),
                )
                print(f"–ú–∞—Ç—á {match_id} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π (–Ω–∏—á—å—è)")

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
                try:
                    rating1 = get_player_rating(player1_name, mode)
                    rating2 = get_player_rating(player2_name, mode)
                    new_rating1, new_rating2 = calculate_elo(
                        rating1, rating2, 0.5
                    )  # –ù–∏—á—å—è

                    update_player_rating(player1_name, new_rating1, mode)
                    update_player_rating(player2_name, new_rating2, mode)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –Ω–∏—á—å–∏—Ö
                    if mode == MODES["station5f"]:
                        db_manager.execute(
                            "players",
                            "UPDATE players SET ties_station5f = ties_station5f + 1 WHERE playername = ?",
                            (player1_name,),
                        )
                        db_manager.execute(
                            "players",
                            "UPDATE players SET ties_station5f = ties_station5f + 1 WHERE playername = ?",
                            (player2_name,),
                        )
                    elif mode == MODES["mots"]:
                        db_manager.execute(
                            "players",
                            "UPDATE players SET ties_mots = ties_mots + 1 WHERE playername = ?",
                            (player1_name,),
                        )
                        db_manager.execute(
                            "players",
                            "UPDATE players SET ties_mots = ties_mots + 1 WHERE playername = ?",
                            (player2_name,),
                        )
                    elif mode == MODES["12min"]:
                        db_manager.execute(
                            "players",
                            "UPDATE players SET ties_12min = ties_12min + 1 WHERE playername = ?",
                            (player1_name,),
                        )
                        db_manager.execute(
                            "players",
                            "UPDATE players SET ties_12min = ties_12min + 1 WHERE playername = ?",
                            (player2_name,),
                        )

                    db_manager.execute(
                        "players",
                        "UPDATE players SET ties = ties + 1 WHERE playername IN (?, ?)",
                        (player1_name, player2_name),
                    )
                    print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–æ–≤ –≤ –õ–°
                try:
                    user1_id = get_discord_id_by_nickname(player1_name)
                    user2_id = get_discord_id_by_nickname(player2_name)

                    # –°–æ–∑–¥–∞–µ–º embed –æ–¥–∏–Ω —Ä–∞–∑
                    embed_dm = discord.Embed(
                        title="‚è± –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                        description=(
                            f"–ú–∞—Ç—á #{match_id} –º–µ–∂–¥—É **{player1_name}** –∏ **{player2_name}**\n"
                            f"–†–µ–∂–∏–º: **{MODE_NAMES.get(mode, 'Unknown')}**\n"
                            f"–ë—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –≤–Ω–∏—á—å—é, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è (1 —á–∞—Å).\n\n"
                            f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è ELO:**\n"
                            f"{player1_name}: {rating1} ‚Üí **{new_rating1}** ({new_rating1 - rating1:+})\n"
                            f"{player2_name}: {rating2} ‚Üí **{new_rating2}** ({new_rating2 - rating2:+})"
                        ),
                        color=discord.Color.orange(),
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞–º
                    if user1_id:
                        user1 = await global_bot.fetch_user(user1_id)
                        await user1.send(embed=embed_dm)
                        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {player1_name} ({user1_id})")

                    if user2_id:
                        user2 = await global_bot.fetch_user(user2_id)
                        await user2.send(embed=embed_dm)
                        print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {player2_name} ({user2_id})")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ (–≤ –æ–±—â–∏–π —á–∞—Ç –º–∞—Ç—á–∞)
                    # –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª, –≥–¥–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω –º–∞—Ç—á
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
                        for queue in queues.values():
                            for player in queue:
                                if player["nickname"] in [
                                    player1_name,
                                    player2_name,
                                ]:
                                    channel_id = player["channel_id"]
                                    channel = global_bot.get_channel(channel_id)
                                    if channel:
                                        await channel.send(RESULT_REMINDER)
                                        print(
                                            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª #{channel.name}"
                                        )
                                        break
                            else:
                                continue
                            break
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º: {e}")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                try:
                    embed_channel = discord.Embed(
                        title="‚è± –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω (–≤—Ä–µ–º—è –≤—ã—à–ª–æ)",
                        description=(
                            f"**Match ID:** {match_id}\n"
                            f"**–†–µ–∂–∏–º:** {MODE_NAMES.get(mode, 'Unknown')}\n"
                            f"**–ò–≥—Ä–æ–∫–∏:** {player1_name} vs {player2_name}\n"
                            f"**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ù–∏—á—å—è 0:0\n\n"
                            f"**–ü—Ä–∏—á–∏–Ω–∞:** –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º–∞—Ç—á–∞ (1 —á–∞—Å)\n\n"
                            f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è ELO:**\n"
                            f"{player1_name}: {rating1} ‚Üí **{new_rating1}** ({new_rating1 - rating1:+})\n"
                            f"{player2_name}: {rating2} ‚Üí **{new_rating2}** ({new_rating2 - rating2:+})"
                        ),
                        color=discord.Color.gold(),  # –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
                    )
                    embed_channel.set_footer(
                        text="–ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏"
                    )

                    # –ò—â–µ–º –∫–∞–Ω–∞–ª elobot-results
                    results_channel_found = None
                    for guild in global_bot.guilds:
                        for channel in guild.text_channels:
                            if channel.name == "elobot-results":
                                results_channel_found = channel
                                print(
                                    f"–ù–∞–π–¥–µ–Ω –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {channel.name} ({channel.id}) –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild.name}"
                                )
                                break
                        if results_channel_found:
                            break

                    if results_channel_found:
                        await results_channel_found.send(embed=embed_channel)
                        print(
                            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –º–∞—Ç—á–µ {match_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
                        )
                    else:
                        print("‚ö† –ö–∞–Ω–∞–ª elobot-results –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª: {e}")

        except Exception as e:
            print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ check_expired_matches: {e}")
            with open("bot_errors.log", "a") as f:
                f.write(
                    f"[{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}] ERROR in check_expired_matches: {e}\n"
                )


def setup(bot):
    global global_bot
    global_bot = bot

    @bot.event
    async def on_message(message):
        # –í–∞–∂–Ω–æ: —Å–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        await bot.process_commands(message)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç –±–æ—Ç–∞
        if not isinstance(message.channel, discord.DMChannel) or message.author.bot:
            return

    @bot.command()
    async def play(ctx):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
        if ctx.channel.name != "elobot-queue":
            return

        player_data = db_manager.execute(
            "players",
            "SELECT playername, in_queue FROM players WHERE discordid = ?",
            (str(ctx.author.id),),
        ).fetchone()

        if not player_data:
            await ctx.send("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä—ã")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
        player_data = db_manager.execute(
            "players",
            "SELECT playername, in_queue FROM players WHERE discordid = ?",
            (str(ctx.author.id),),
        ).fetchone()

        if not player_data:
            await ctx.send("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        nickname, in_queue = player_data

        # +++ –ü–†–û–í–ï–†–ö–ê –ê–ö–¢–ò–í–ù–´–• –ú–ê–¢–ß–ï–ô +++
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–µ –º–∞—Ç—á–∏ (matchtype=1)
        active_normal_match = db_manager.execute(
            "matches",
            """
            SELECT matchid 
            FROM matches 
            WHERE (player1 = ? OR player2 = ?) 
            AND isover = 0
            AND matchtype = 1
            """,
            (nickname, nickname),
        ).fetchone()

        if active_normal_match:
            await ctx.send(
                f"‚ùå –£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—ã—á–Ω—ã–π –º–∞—Ç—á (ID: {active_normal_match[0]}). "
                "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –µ–≥–æ –∏–ª–∏ —Å–¥–∞–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π .giveup –ø–µ—Ä–µ–¥ –ø–æ–∏—Å–∫–æ–º –Ω–æ–≤–æ–π –∏–≥—Ä—ã."
            )
            return
        # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –ê–ö–¢–ò–í–ù–´–• –ú–ê–¢–ß–ï–ô ---

        if in_queue == 1:
            await ctx.send("‚ùå –í—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏")
            return

        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        view = ModeSelectView(ctx.author.id)
        msg = await ctx.send("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã:", view=view)

        await view.wait()

        if view.selected_mode is None:  # –¢–∞–π–º–∞—É—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω–∞
            await msg.edit(content="‚åõ –í—Ä–µ–º—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ", view=None)
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å
        rating = get_player_rating(nickname, view.selected_mode)

        queues[view.selected_mode].append(
            {
                "discord_id": ctx.author.id,
                "nickname": nickname,
                "rating": rating,
                "channel_id": ctx.channel.id,
                "join_time": datetime.now(),
            }
        )
        save_queues_to_db()

        db_manager.execute(
            "players",
            "UPDATE players SET in_queue = 1 WHERE discordid = ?",
            (str(ctx.author.id),),
        )

        await msg.edit(
            content=f"üîç –ü–æ–∏—Å–∫ –∏–≥—Ä—ã –≤ —Ä–µ–∂–∏–º–µ {MODE_NAMES[view.selected_mode]}...",
            view=None,
        )

    @bot.command()
    async def leave(ctx):
        if ctx.channel.name != "elobot-queue":
            return

        player_data = db_manager.execute(
            "players",
            "SELECT playername, in_queue FROM players WHERE discordid = ?",
            (str(ctx.author.id),),
        ).fetchone()

        if not player_data or player_data[1] == 0:
            await ctx.send("‚ùå –í—ã –Ω–µ –≤ –æ—á–µ—Ä–µ–¥–∏")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π
        for mode, queue in queues.items():
            queues[mode] = [p for p in queue if p["discord_id"] != ctx.author.id]
        save_queues_to_db()

        db_manager.execute(
            "players",
            "UPDATE players SET in_queue = 0 WHERE discordid = ?",
            (str(ctx.author.id),),
        )
        await ctx.send("‚úÖ –í—ã –≤—ã—à–ª–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏")

    @bot.command()
    async def queue(ctx):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
        if ctx.channel.name != "elobot-queue":
            return

        # –°–æ–∑–¥–∞–µ–º Embed
        embed = discord.Embed(
            title="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–µ—Ä–µ–¥–µ–π", color=discord.Color.blue()
        )

        # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∂–∏–º–∞–º
        display_order = [
            (MODES["mots"], "MotS Solo", "üî´"),
            (MODES["12min"], "12 Minute", "‚è±Ô∏è"),
            (MODES["station5f"], "Station 5 Flags", "üö©"),
            (MODES["any"], "Any Mode", "üé≤"),
        ]

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–π –æ—á–µ—Ä–µ–¥–∏
        for mode_id, mode_name, emoji in display_order:
            count = len(queues[mode_id])
            embed.add_field(
                name=f"{emoji} {mode_name}",
                value=f"`{count}` –∏–≥—Ä–æ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏",
                inline=True,
            )

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–∞—Ö
        total_in_queue = (
            db_manager.execute(
                "players", "SELECT COUNT(*) FROM players WHERE in_queue = 1"
            ).fetchone()[0]
            or 0
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–∞—Ö
        total_in_matches = (
            db_manager.execute(
                "matches",
                """
            SELECT COUNT(DISTINCT player) 
            FROM (
                SELECT player1 AS player FROM matches WHERE isover = 0
                UNION ALL
                SELECT player2 AS player FROM matches WHERE isover = 0
            )
            """,
            ).fetchone()[0]
            or 0
        )

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ "–≤ –∏–≥—Ä–µ"
        total_in_game = total_in_queue + total_in_matches

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        embed.description = (
            f"**–í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –∏–≥—Ä–µ:** `{total_in_game}`\n"
            f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥—è—Ö: `{total_in_queue}`\n"
            f"‚Ä¢ –í –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–∞—Ö: `{total_in_matches}`"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        embed.set_footer(
            text=f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {datetime.now().strftime('%H:%M:%S')}"
        )

        await ctx.send(embed=embed)

    @bot.command()
    async def result(ctx, match_id: int, scores: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–º —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–º"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –õ–°
        if not isinstance(ctx.channel, discord.DMChannel):
            await ctx.send(
                "‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º."
            )
            return

        if match_id in pending_reports:
            await ctx.send(
                "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –ø–æ —ç—Ç–æ–º—É –º–∞—Ç—á—É –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞
        if not re.match(r"^\d+-\d+$", scores):
            await ctx.send(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `.result <ID –º–∞—Ç—á–∞> <—Å—á–µ—Ç-–∏–≥—Ä–æ–∫–∞1>-<—Å—á–µ—Ç-–∏–≥—Ä–æ–∫–∞2>`"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Å—á–µ—Ç–∞
        score1, score2 = map(int, scores.split("-"))
        if score1 == score2:
            await ctx.send(
                "‚ùå –°—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω—ã–º! –ú–∞—Ç—á –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        if not ctx.message.attachments:
            await ctx.send("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –º–∞—Ç—á–∞.")
            return

        screenshot = ctx.message.attachments[0].url

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞
        match_data = db_manager.execute(
            "matches",
            "SELECT player1, player2, mode, matchtype FROM matches WHERE matchid = ?",
            (match_id,),
        ).fetchone()

        if not match_data:
            await ctx.send("‚ùå –ú–∞—Ç—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        player1, player2, mode, matchtype = match_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –º–∞—Ç—á–µ
        player_data = db_manager.execute(
            "players",
            "SELECT playername FROM players WHERE discordid = ?",
            (str(ctx.author.id),),
        ).fetchone()

        if not player_data:
            await ctx.send("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
            return

        submitter_name = player_data[0]

        if submitter_name not in [player1, player2]:
            await ctx.send("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        opponent_name = player2 if submitter_name == player1 else player1

        # –ü–æ–ª—É—á–∞–µ–º discord_id –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
        opponent_data = db_manager.execute(
            "players",
            "SELECT discordid FROM players WHERE playername = ?",
            (opponent_name,),
        ).fetchone()

        if not opponent_data:
            await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        opponent_id = int(opponent_data[0])

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ø–æ–Ω–µ–Ω—Ç–æ–º
        pending_player_confirmations[match_id] = {
            "match_id": match_id,
            "player1": player1,
            "player2": player2,
            "scores": scores,
            "screenshot": screenshot,
            "submitter_id": ctx.author.id,
            "submitter_name": submitter_name,
            "opponent_id": opponent_id,
            "opponent_name": opponent_name,
            "mode": mode,
            "timestamp": datetime.now(),
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ø–æ–Ω–µ–Ω—Ç—É
        try:
            opponent_user = await global_bot.fetch_user(opponent_id)

            embed = discord.Embed(
                title="üîî –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞",
                description=(
                    f"–í–∞—à –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ #{match_id}\n"
                    f"**–°—á–µ—Ç:** {scores}\n\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—Å–ª–∏ –æ–Ω –≤–µ—Ä–µ–Ω, "
                    f"–∏–ª–∏ –æ—Å–ø–æ—Ä—å—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è."
                ),
                color=discord.Color.orange(),
            )

            if screenshot:
                embed.set_image(url=screenshot)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ (1 —á–∞—Å)
            embed.set_footer(text="–£ –≤–∞—Å –µ—Å—Ç—å 1 —á–∞—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ")

            view = PlayerConfirmationView(match_id, ctx.author.id, opponent_id)
            msg = await opponent_user.send(embed=embed, view=view)
            view.message = msg

            await ctx.send("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞—à–µ–º—É –æ–ø–ø–æ–Ω–µ–Ω—Ç—É –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            await ctx.send(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ø–æ–Ω–µ–Ω—Ç—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )

        if matchtype == 2:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏–∑ –ë–î
            tournament_data = db_manager.fetchone(
                "matches",
                "SELECT tournament_id FROM matches WHERE matchid = ?",
                (match_id,),
            )

            if tournament_data:
                tournament_name = tournament_data[0]
                results_channel = discord.utils.get(
                    bot.get_all_channels(), name=f"{tournament_name}-results"
                )

                if results_channel:
                    # –°–æ–∑–¥–∞–µ–º embed –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                    embed = discord.Embed(
                        title=f"üèÜ –¢—É—Ä–Ω–∏—Ä–Ω—ã–π –º–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω | ID: {match_id}",
                        description=(
                            f"**–ò–≥—Ä–æ–∫–∏:** {player1} vs {player2}\n"
                            f"**–°—á–µ—Ç:** {scores}\n"
                            f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {player1 if int(scores.split('-')[0]) > int(scores.split('-')[1]) else player2}"
                        ),
                        color=discord.Color.green(),
                    )

                    if ctx.message.attachments:
                        embed.set_image(url=ctx.message.attachments[0].url)

                    await results_channel.send(embed=embed)

    @bot.command()
    async def giveup(ctx):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –Ω—É–∂–Ω–æ–º –∫–∞–Ω–∞–ª–µ –∏–ª–∏ –≤ –õ–° –±–æ—Ç—É
        if (
            not isinstance(ctx.channel, discord.DMChannel)
            and ctx.channel.name != "elobot-queue"
        ):
            return

        # –ü–†–û–í–ï–†–ö–ê –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò –ß–ï–†–ï–ó –ë–ê–ó–£ –î–ê–ù–ù–´–•
        player_data = db_manager.execute(
            "players",
            "SELECT playername FROM players WHERE discordid = ?",
            (str(ctx.author.id),),
        ).fetchone()
        if not player_data:
            await ctx.send("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –º–∞—Ç—á –∏–≥—Ä–æ–∫–∞
        player_data = db_manager.execute(
            "players",
            "SELECT playername FROM players WHERE discordid = ?",
            (str(ctx.author.id),),
        ).fetchone()

        if not player_data:
            await ctx.send("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        nickname = player_data[0]

        match_data = db_manager.execute(
            "matches",
            """
            SELECT matchid, mode, player1, player2, matchtype
            FROM matches 
            WHERE (player1 = ? OR player2 = ?) 
            AND isover = 0
            """,
            (nickname, nickname),
        ).fetchone()

        if not match_data:
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π")
            return

        match_id, mode, player1, player2, matchtype = match_data

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
        if nickname == player1:
            winner = player2
            loser = player1
            player1_score = 0
            player2_score = 1
        else:
            winner = player1
            loser = player2
            player1_score = 1
            player2_score = 0

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –º–∞—Ç—á–∞
        db_manager.execute(
            "matches",
            """
            UPDATE matches 
            SET player1score = ?, player2score = ?, isover = 1, isverified = 1
            WHERE matchid = ?
            """,
            (player1_score, player2_score, match_id),
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
        db_manager.execute(
            "players",
            "UPDATE players SET wins = wins + 1 WHERE playername = ?",
            (winner,),
        )
        db_manager.execute(
            "players",
            "UPDATE players SET losses = losses + 1 WHERE playername = ?",
            (loser,),
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º ELO
        winner_rating = get_player_rating(winner, mode)
        loser_rating = get_player_rating(loser, mode)

        # –í—Å–µ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞—ë–º 1 (–ø–æ–±–µ–¥–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è)
        new_winner_rating, new_loser_rating = calculate_elo(
            winner_rating, loser_rating, 1
        )

        update_player_rating(winner, new_winner_rating, mode)
        update_player_rating(loser, new_loser_rating, mode)
        # –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        mode_name = MODE_NAMES.get(mode, "Unknown")
        embed = discord.Embed(
            title="üè≥Ô∏è –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω (—Å–¥–∞—á–∞)",
            description=(
                f"**Match ID:** {match_id}\n"
                f"**–†–µ–∂–∏–º:** {mode_name}\n"
                f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner}\n"
                f"**–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π:** {loser}\n\n"
                f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è ELO:**\n"
                f"{winner}: {winner_rating} ‚Üí **{new_winner_rating}** (+{new_winner_rating - winner_rating})\n"
                f"{loser}: {loser_rating} ‚Üí **{new_loser_rating}** ({new_loser_rating - loser_rating})"
            ),
            color=discord.Color.red(),
        )

        embed_channel = discord.Embed(  ## embed –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            title="üè≥Ô∏è –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω (—Å–¥–∞—á–∞)",
            description=(
                f"**Match ID:** {match_id}\n"
                f"**–†–µ–∂–∏–º:** {mode_name}\n"
                f"**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {winner}\n"
                f"**–ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π:** {loser}\n\n"
                f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è ELO:**\n"
                f"{winner}: {winner_rating} ‚Üí **{new_winner_rating}** (+{new_winner_rating - winner_rating})\n"
                f"{loser}: {loser_rating} ‚Üí **{new_loser_rating}** ({new_loser_rating - loser_rating})"
            ),
            color=discord.Color.red(),
        )

        # +++ –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–ü–†–ê–í–ö–£ –í –ö–ê–ù–ê–õ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í +++
        # –ò—â–µ–º –∫–∞–Ω–∞–ª elobot-results
        results_channel_found = None
        for guild in global_bot.guilds:
            results_channel = discord.utils.get(
                guild.text_channels, name="elobot-results"
            )
            if results_channel:
                results_channel_found = results_channel
                break

        if results_channel_found:
            try:
                await results_channel_found.send(embed=embed_channel)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª –æ—á–µ—Ä–µ–¥–∏ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                try:
                    if isinstance(ctx.channel, discord.TextChannel):
                        await ctx.send(
                            f"‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}"
                        )
                except:
                    pass
        else:
            print("–ö–∞–Ω–∞–ª elobot-results –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –Ω–∞ –æ–¥–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ")
            try:
                if isinstance(ctx.channel, discord.TextChannel):
                    await ctx.send("‚ö† –ö–∞–Ω–∞–ª elobot-results –Ω–µ –Ω–∞–π–¥–µ–Ω")
            except:
                pass

        if isinstance(ctx.channel, discord.TextChannel):
            await ctx.send("‚úÖ –í—ã —Å–¥–∞–ª–∏—Å—å. –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω.")
        else:
            await ctx.send(
                "‚úÖ –í—ã —Å–¥–∞–ª–∏—Å—å. –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º."
            )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –õ–° –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
            winner_user = await global_bot.fetch_user(
                get_discord_id_by_nickname(winner)
            )
            loser_user = await global_bot.fetch_user(get_discord_id_by_nickname(loser))

            await winner_user.send(embed=embed)
            await loser_user.send(embed=embed)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–¥–∞—á–µ: {e}")

    @bot.command()
    async def report(ctx, match_id: int, *, reason: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞ –Ω–∞ –º–∞—Ç—á"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –õ–° –∏–ª–∏ –∫–∞–Ω–∞–ª–µ –æ—á–µ—Ä–µ–¥–∏
        if (
            not isinstance(ctx.channel, discord.DMChannel)
            and ctx.channel.name != "elobot-queue"
        ):
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞
        match_data = db_manager.execute(
            "matches",
            "SELECT player1, player2 FROM matches WHERE matchid = ?",
            (match_id,),
        ).fetchone()

        if not match_data:
            await ctx.send("‚ùå –ú–∞—Ç—á —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        player1, player2 = match_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ –º–∞—Ç—á–µ
        player_data = db_manager.execute(
            "players",
            "SELECT playername FROM players WHERE discordid = ?",
            (str(ctx.author.id),),
        ).fetchone()

        if not player_data:
            await ctx.send("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ")
            return

        reporter_name = player_data[0]

        if reporter_name not in [player1, player2]:
            await ctx.send("‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º –º–∞—Ç—á–µ.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è (–ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Ä–µ–ø–æ—Ä—Ç–µ—Ä–∞)
        violator_name = player2 if reporter_name == player1 else player1

        # –ü–æ–º–µ—á–∞–µ–º –º–∞—Ç—á –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π (–Ω–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π)
        db_manager.execute(
            "matches", "UPDATE matches SET isover = 1 WHERE matchid = ?", (match_id,)
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        screenshot_url = None
        if ctx.message.attachments:
            screenshot_url = ctx.message.attachments[0].url

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–ø–æ—Ä—Ç
        pending_reports[match_id] = {
            "reporter_id": ctx.author.id,
            "reporter_name": reporter_name,
            "violator_name": violator_name,
            "reason": reason,
            "screenshot": screenshot_url,
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
        try:
            moderator = await global_bot.fetch_user(MODERATOR_ID)

            embed = discord.Embed(
                title="‚ö†Ô∏è –ù–æ–≤—ã–π —Ä–µ–ø–æ—Ä—Ç",
                description=(
                    f"**Match ID:** {match_id}\n"
                    f"**–†–µ–ø–æ—Ä—Ç–µ—Ä:** {reporter_name}\n"
                    f"**–ù–∞—Ä—É—à–∏—Ç–µ–ª—å:** {violator_name}\n"
                    f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}"
                ),
                color=discord.Color.orange(),
            )

            if screenshot_url:
                embed.set_image(url=screenshot_url)

            view = ReportView(match_id, reporter_name, violator_name)
            await moderator.send(embed=embed, view=view)

            await ctx.send(
                "‚úÖ –†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ. –ú–∞—Ç—á –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º–æ—Ä–æ–∂–µ–Ω."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–ø–æ—Ä—Ç–∞: {e}")
            await ctx.send(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )


class ConfirmMatchView(View):
    def __init__(self, match_id, bot, result_message_id):
        super().__init__(timeout=None)
        self.match_id = match_id
        self.bot = bot
        self.result_message_id = result_message_id

    @discord.ui.button(label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", style=discord.ButtonStyle.green)
    async def confirm_button(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∏–∑ pending_results
        result_data = pending_results.get(self.result_message_id)
        if not result_data:
            await interaction.response.send_message(
                "–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", ephemeral=True
            )
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—á–µ—Ç –∏–∑ –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–º
        try:
            score1, score2 = map(int, result_data["scores"].split("-"))
        except ValueError:
            await interaction.response.send_message(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—á–µ—Ç–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", ephemeral=True
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–≤–µ–Ω—Å—Ç–≤–æ —Å—á–µ—Ç–∞
        if score1 == score2:
            await interaction.response.send_message(
                "‚ùå –°—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω—ã–º! –ú–∞—Ç—á –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è",
                ephemeral=True,
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –∏–∑ –ë–î
        match = db_manager.execute(
            "matches",
            "SELECT mode, player1, player2, map FROM matches WHERE matchid = ?",
            (self.match_id,),
        ).fetchone()

        if not match:
            await interaction.response.send_message("–ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral=True)
            return

        mode, player1, player2, map_name = match
        mode_name = MODE_NAMES.get(mode, "Unknown")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –ø–æ —Å—á–µ—Ç—É
        if score1 > score2:
            presumed_winner = player1
        else:
            presumed_winner = player2

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
        submitter_data = db_manager.execute(
            "players",
            "SELECT playername FROM players WHERE discordid = ?",
            (str(result_data["submitted_by"]),),
        ).fetchone()

        if not submitter_data:
            await interaction.response.send_message(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞", ephemeral=True
            )
            return

        submitter_name = submitter_data[0]

        if submitter_name != presumed_winner:
            await interaction.response.send_message(
                f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –º–∞—Ç—á–∞ ({presumed_winner})!",
                ephemeral=True,
            )
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—á–µ—Ç–∞
        if score1 > score2:
            result = 1  # –ü–æ–±–µ–¥–∞ player1
        elif score1 < score2:
            result = 0  # –ü–æ–±–µ–¥–∞ player2
        else:
            result = 0.5  # –ù–∏—á—å—è

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
        old_rating1 = get_player_rating(player1, mode)
        old_rating2 = get_player_rating(player2, mode)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
        new_rating1, new_rating2 = calculate_elo(old_rating1, old_rating2, result)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
        update_player_rating(player1, new_rating1, mode)
        update_player_rating(player2, new_rating2, mode)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        if result == 1:
            db_manager.execute(
                "players",
                "UPDATE players SET wins = wins + 1 WHERE playername = ?",
                (player1,),
            )
            db_manager.execute(
                "players",
                "UPDATE players SET losses = losses + 1 WHERE playername = ?",
                (player2,),
            )
        elif result == 0:
            db_manager.execute(
                "players",
                "UPDATE players SET wins = wins + 1 WHERE playername = ?",
                (player2,),
            )
            db_manager.execute(
                "players",
                "UPDATE players SET losses = losses + 1 WHERE playername = ?",
                (player1,),
            )
        else:  # –ù–∏—á—å—è
            db_manager.execute(
                "players",
                "UPDATE players SET ties = ties + 1 WHERE playername IN (?, ?)",
                (player1, player2),
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if mode == MODES["station5f"]:
            if result == 1:
                db_manager.execute(
                    "players",
                    "UPDATE players SET wins_station5f = wins_station5f + 1 WHERE playername = ?",
                    (player1,),
                )
                db_manager.execute(
                    "players",
                    "UPDATE players SET losses_station5f = losses_station5f + 1 WHERE playername = ?",
                    (player2,),
                )
            elif result == 0:
                db_manager.execute(
                    "players",
                    "UPDATE players SET wins_station5f = wins_station5f + 1 WHERE playername = ?",
                    (player2,),
                )
                db_manager.execute(
                    "players",
                    "UPDATE players SET losses_station5f = losses_station5f + 1 WHERE playername = ?",
                    (player1,),
                )
            else:
                db_manager.execute(
                    "players",
                    "UPDATE players SET ties_station5f = ties_station5f + 1 WHERE playername = ?",
                    (player1,),
                )
                db_manager.execute(
                    "players",
                    "UPDATE players SET ties_station5f = ties_station5f + 1 WHERE playername = ?",
                    (player2,),
                )
        elif mode == MODES["mots"]:
            if result == 1:
                db_manager.execute(
                    "players",
                    "UPDATE players SET wins_mots = wins_mots + 1 WHERE playername = ?",
                    (player1,),
                )
                db_manager.execute(
                    "players",
                    "UPDATE players SET losses_mots = losses_mots + 1 WHERE playername = ?",
                    (player2,),
                )
            elif result == 0:
                db_manager.execute(
                    "players",
                    "UPDATE players SET wins_mots = wins_mots + 1 WHERE playername = ?",
                    (player2,),
                )
                db_manager.execute(
                    "players",
                    "UPDATE players SET losses_mots = losses_mots + 1 WHERE playername = ?",
                    (player1,),
                )
            else:
                db_manager.execute(
                    "players",
                    "UPDATE players SET ties_mots = ties_mots + 1 WHERE playername = ?",
                    (player1,),
                )
                db_manager.execute(
                    "players",
                    "UPDATE players SET ties_mots = ties_mots + 1 WHERE playername = ?",
                    (player2,),
                )
        elif mode == MODES["12min"]:
            if result == 1:
                db_manager.execute(
                    "players",
                    "UPDATE players SET wins_12min = wins_12min + 1 WHERE playername = ?",
                    (player1,),
                )
                db_manager.execute(
                    "players",
                    "UPDATE players SET losses_12min = losses_12min + 1 WHERE playername = ?",
                    (player2,),
                )
            elif result == 0:
                db_manager.execute(
                    "players",
                    "UPDATE players SET wins_12min = wins_12min + 1 WHERE playername = ?",
                    (player2,),
                )
                db_manager.execute(
                    "players",
                    "UPDATE players SET losses_12min = losses_12min + 1 WHERE playername = ?",
                    (player1,),
                )
            else:
                db_manager.execute(
                    "players",
                    "UPDATE players SET ties_12min = ties_12min + 1 WHERE playername = ?",
                    (player1,),
                )
                db_manager.execute(
                    "players",
                    "UPDATE players SET ties_12min = ties_12min + 1 WHERE playername = ?",
                    (player2,),
                )

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –º–∞—Ç—á–∞ —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º —Å—á–µ—Ç–æ–º
        db_manager.execute(
            "matches",
            "UPDATE matches SET player1score = ?, player2score = ?, isover = 1, isverified = 1 WHERE matchid = ?",
            (score1, score2, self.match_id),
        )

        # –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        if self.result_message_id in pending_results:
            del pending_results[self.result_message_id]

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è ELO
        elo_change1 = new_rating1 - old_rating1
        elo_change2 = new_rating2 - old_rating2

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –≤ –∫–∞–Ω–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        for guild in self.bot.guilds:
            results_channel = discord.utils.get(
                guild.text_channels, name="elobot-results"
            )
            if results_channel:
                result_embed = discord.Embed(
                    title=f"‚úÖ –ú–∞—Ç—á –∑–∞–≤–µ—Ä—à–µ–Ω | ID: {self.match_id}",
                    description=(
                        f"**–†–µ–∂–∏–º:** {mode_name}\n"
                        f"**–ö–∞—Ä—Ç–∞:** {map_name if map_name else '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'}\n"
                        f"**–ò–≥—Ä–æ–∫–∏:** {player1} vs {player2}\n"
                        f"**–°—á—ë—Ç:** {score1} - {score2}\n\n"
                        f"**–ò–∑–º–µ–Ω–µ–Ω–∏—è ELO ({mode_name}):**\n"
                        f"{player1}: {old_rating1} ‚Üí **{new_rating1}** ({'+' if elo_change1 >= 0 else ''}{elo_change1})\n"
                        f"{player2}: {old_rating2} ‚Üí **{new_rating2}** ({'+' if elo_change2 >= 0 else ''}{elo_change2})"
                    ),
                    color=discord.Color.green(),
                )
                await results_channel.send(embed=result_embed)
                break

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
        try:
            player1_id = get_discord_id_by_nickname(player1)
            player2_id = get_discord_id_by_nickname(player2)

            if player1_id:
                user1 = await global_bot.fetch_user(player1_id)
                await user1.send(
                    f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –º–∞—Ç—á–∞ #{self.match_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!"
                )

            if player2_id:
                user2 = await global_bot.fetch_user(player2_id)
                await user2.send(
                    f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞—à–µ–≥–æ –º–∞—Ç—á–∞ #{self.match_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤: {e}")

        await interaction.response.send_message("–ú–∞—Ç—á –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!", ephemeral=True)
        await interaction.message.edit(view=None)

    @discord.ui.button(label="–û—Ç–∫–ª–æ–Ω–∏—Ç—å", style=discord.ButtonStyle.red)
    async def reject_button(
        self, interaction: discord.Interaction, button: discord.ui.Button
    ):
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        result_data = pending_results.get(self.result_message_id)
        if not result_data:
            await interaction.response.send_message(
                "–î–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —É—Å—Ç–∞—Ä–µ–ª–∏ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", ephemeral=True
            )
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        try:
            user = await global_bot.fetch_user(result_data["submitted_by"])
            await user.send(
                f"‚ùå –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –º–∞—Ç—á–∞ {self.match_id} –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

        # –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        if self.result_message_id in pending_results:
            del pending_results[self.result_message_id]

        # –ü–æ–º–µ—á–∞–µ–º –º–∞—Ç—á –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–π
        db_manager.execute(
            "matches",
            "UPDATE matches SET isverified = 2 WHERE matchid = ?",
            (self.match_id,),
        )

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        guild = interaction.guild
        if guild:
            logs_channel = discord.utils.get(guild.text_channels, name="elobot-logs")
            if logs_channel:
                await logs_channel.send(
                    f"‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞ {self.match_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º"
                )

        await interaction.response.send_message("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω", ephemeral=True)
        await interaction.message.edit(view=None)
